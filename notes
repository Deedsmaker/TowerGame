Detecting collisions between two rotated rectangles can be a bit more complex than with axis-aligned rectangles, but there are several techniques you can use. Here are some common methods:

1. **Separating Axis Theorem (SAT)**:
   - The SAT states that two convex shapes do not overlap if there exists a line (axis) along which their projections do not overlap. For rotated rectangles, you can use the edges of both rectangles to define potential separating axes.
   - For each edge of both rectangles, compute the normal vector (perpendicular) to the edge. Project the corners of both rectangles onto this normal vector and check for overlaps.
   - If you find a separating axis where the projections do not overlap, then the rectangles are not colliding. If no such axis exists, they are colliding.

2. **Bounding Box Check**:
   - Before performing more complex checks, you can first check if the axis-aligned bounding boxes (AABBs) of the two rectangles overlap. If they do not, you can skip the more expensive SAT checks.

3. **GJK Algorithm (Gilbert-Johnson-Keerthi)**:
   - The GJK algorithm is a popular method for detecting collisions between convex shapes. It works by iteratively finding the closest points between the two shapes and determining if they intersect.
   - This method can be more efficient for complex shapes and is often used in conjunction with other techniques for collision response.

4. **Minkowski Difference**:
   - You can compute the Minkowski difference of the two rectangles and check if the origin (0,0) is inside the resulting shape. If it is, the rectangles are colliding.
   - This method can be more complex to implement but is powerful for various shapes.

5. **Point-in-Polygon Test**:
   - If you have the vertices of both rectangles, you can check if any vertex of one rectangle is inside the other rectangle using a point-in-polygon test. This can be combined with other methods for more robust collision detection.

6. **Sweep and Prune**:
   - If you have many rectangles and need to check for collisions efficiently, consider using a sweep and prune algorithm to reduce the number of pairs you need to check. This involves sorting the rectangles along one axis and checking for overlaps in a more efficient manner.

### Implementation Steps for SAT:
1. Calculate the normals for each edge of both rectangles.
2. For each normal, project the vertices of both rectangles onto the normal.
3. Check for overlaps in the projections.
4. If all axes have overlapping projections, the rectangles are colliding.

### Example Code Snippet (SAT):
```python
def project_polygon(vertices, axis):
    min_proj = float('inf')
    max_proj = float('-inf')
    for v in vertices:
        proj = dot(v, axis)
        min_proj = min(min_proj, proj)
        max_proj = max(max_proj, proj)
    return min_proj, max_proj

def overlap_on_axis(rect1, rect2, axis):
    min1, max1 = project_polygon(rect1, axis)
    min2, max2 = project_polygon(rect2, axis)
    return not (max1 < min2 or max2 < min1)

def rectangles_collide(rect1, rect2):
    edges1 = get_edges(rect1)
    edges2 = get_edges(rect2)
    
    for edge in edges1 + edges2:
        axis = get_normal(edge)
        if not overlap_on_axis(rect1, rect2, axis):
            return False
    return True
```

This is a high-level overview, and the actual implementation will depend on your specific requirements and the structure of your rectangles.

Yes, you can detect a specific collision point using the Separating Axis Theorem (SAT) by following these steps:

1. **Perform SAT to Check for Collision**: First, use SAT to determine if the two rotated rectangles are colliding. This involves checking for overlaps along the axes defined by the edges of both rectangles.

2. **Find the Penetration Depth**: If a collision is detected, you need to calculate the penetration depth along the axis where the overlap is the greatest. This will help you determine how far the rectangles are overlapping.

3. **Calculate the Collision Normal**: The collision normal is the axis along which the penetration depth is measured. This normal will point from one rectangle to the other.

4. **Determine the Collision Points**: To find the specific collision points, you can project the vertices of both rectangles onto the collision normal. The points of contact will be the points on the edges of the rectangles that are closest to each other along the collision normal.

### Steps to Find Collision Points:

1. **Calculate the Projection**: For each rectangle, project its vertices onto the collision normal. This will give you the minimum and maximum projections for each rectangle.

2. **Identify the Overlapping Region**: The overlapping region on the collision normal can be found by taking the maximum of the minimum projections and the minimum of the maximum projections.

3. **Calculate the Collision Points**: The collision points can be determined by finding the vertices of the rectangles that correspond to the overlapping region. You can take the midpoints of the overlapping projections or the closest points on the edges of the rectangles.

### Example Code Snippet for Collision Points:
Hereâ€™s a simplified example of how you might implement this:

```python
def get_collision_points(rect1, rect2):
    # Assume rect1 and rect2 are lists of vertices in order
    edges1 = get_edges(rect1)
    edges2 = get_edges(rect2)
    
    collision_normal = None
    max_penetration_depth = float('-inf')
    
    # Check for collision and find the best axis
    for edge in edges1 + edges2:
        axis = get_normal(edge)
        if overlap_on_axis(rect1, rect2, axis):
            # Calculate penetration depth
            penetration_depth = calculate_penetration_depth(rect1, rect2, axis)
            if penetration_depth > max_penetration_depth:
                max_penetration_depth = penetration_depth
                collision_normal = axis
    
    if collision_normal is None:
        return None  # No collision
    
    # Project vertices onto the collision normal
    min1, max1 = project_polygon(rect1, collision_normal)
    min2, max2 = project_polygon(rect2, collision_normal)
    
    # Calculate the collision points
    collision_point1 = (max1 + min1) / 2  # Midpoint of the overlap
    collision_point2 = (max2 + min2) / 2  # Midpoint of the overlap
    
    return collision_point1, collision_point2

def calculate_penetration_depth(rect1, rect2, axis):
    min1, max1 = project_polygon(rect1, axis)
    min2, max2 = project_polygon(rect2, axis)
    return min(max1 - min2, max2 - min1)
```

### Notes:
- The collision points returned can be adjusted based on your needs. You might want to return the closest points on the edges of the rectangles instead of midpoints.
- The collision normal can also be used to resolve the collision by pushing the rectangles apart along this normal.
- Ensure that your projection and edge calculations are correctly implemented to get accurate results.

By following these steps, you can effectively determine the specific collision points between two rotated rectangles using SAT.
